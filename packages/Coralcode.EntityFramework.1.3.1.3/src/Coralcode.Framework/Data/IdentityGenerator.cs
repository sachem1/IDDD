using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Coralcode.Framework.ConfigManager;
using Coralcode.Framework.Extensions;
using Coralcode.Framework.Serializers;
using Coralcode.Framework.Task;

namespace Coralcode.Framework.Data
{
    public static class IdentityGenerator
    {
        private const int MAXAPPID = 128;
        private const int MAXCOUNT = 16383;
        private static long _unixTime;
        private static int _indexCoden;
        private static readonly string AppId;
        private static readonly string AppNode;
        private static sbyte _appNode = 0;
        private static int _appId = 0;

        private static  readonly  object Monitor = new object();

        static IdentityGenerator()
        {
            try
            {
                AppId = AppConfig.AppSettings["AppId"];
                if (string.IsNullOrEmpty(AppId))
                    AppId = "1";

                AppNode = AppConfig.AppSettings["AppNode"];
                if (string.IsNullOrEmpty(AppNode))
                    AppNode = "1";

                sbyte.TryParse(AppNode, out _appNode);
                if (_appNode > 15)
                    throw new Exception("AppNode超出范围");

                if (!int.TryParse(AppId, out _appId))
                    _appId = 1;

                _appId = MAXAPPID - _appId;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// This algorithm generates secuential GUIDs across system boundaries, ideal for databases 
        /// </summary>
        /// <returns></returns>
        public static Guid NewSequentialGuid()
        {
            byte[] uid = Guid.NewGuid().ToByteArray();
            byte[] binDate = BitConverter.GetBytes(DateTime.UtcNow.Ticks);

            byte[] secuentialGuid = new byte[uid.Length];

            secuentialGuid[0] = uid[0];
            secuentialGuid[1] = uid[1];
            secuentialGuid[2] = uid[2];
            secuentialGuid[3] = uid[3];
            secuentialGuid[4] = uid[4];
            secuentialGuid[5] = uid[5];
            secuentialGuid[6] = uid[6];
            // set the first part of the 8th byte to '1100' so     
            // later we'll be able to validate it was generated by us   

            secuentialGuid[7] = (byte)(0xc0 | (0xf & uid[7]));

            // the last 8 bytes are sequential,    
            // it minimizes index fragmentation   
            // to a degree as long as there are not a large    
            // number of Secuential-Guids generated per millisecond  

            secuentialGuid[9] = binDate[0];
            secuentialGuid[8] = binDate[1];
            secuentialGuid[15] = binDate[2];
            secuentialGuid[14] = binDate[3];
            secuentialGuid[13] = binDate[4];
            secuentialGuid[12] = binDate[5];
            secuentialGuid[11] = binDate[6];
            secuentialGuid[10] = binDate[7];

            return new Guid(secuentialGuid);
        }

        public static string NewGuidString()
        {
            return NewSequentialGuid().ToString().Replace("-", "");
        }

        public static long NewSequentialDomainId()
        {
          
            return NextId();

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="number"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.Synchronized)]
        public static long NextId(short number = 0)
        {
            lock (Monitor)
            {
                if (_unixTime != DateTime.Now.Second)
                {
                    _indexCoden = 0;
                    _unixTime = DateTime.Now.Second;
                }
                if (_unixTime == DateTime.Now.Second && _indexCoden > MAXCOUNT)
                {
                    Thread.Sleep(1000);
                }
                Interlocked.Increment(ref _indexCoden);

                //var timecoden = AppId.PadLeft(2, '0') + DateTime.Now.ToUnixTime().ToString().PadLeft(10, '0') +
                //                _indexCoden.ToString().PadLeft(5, '0') + number.ToString().PadLeft(2, '0');
                return GetSkewResult(number, DateTime.Now);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="block"></param>
        /// <returns></returns>
        public static List<long> GetIdList(int block)
        {
            var idList = new List<long>(block);
            var result = new List<long>(block);

            for (var i = 0; i < block; i++)
                idList.Add(NewSequentialDomainId());

            var distIdList = idList.Distinct().ToList();
            result.AddRange(distIdList);

            if (distIdList.Count != 0)
                result.AddRange(GetIdList(block - distIdList.Count));

            return result;

        }

        /// <summary>
        /// AppId + AppNode + Time + Count
        /// 8 + 7 + 32 + 16
        /// </summary>
        /// <param name="now"></param>
        /// <returns></returns>
        //private static long GetSkewResult(DateTime now)
        //{
        //    var result = CalculateSkew(long.Parse(AppId), 55);
        //    result |= CalculateSkew(_appNode, 48);
        //    result |= CalculateSkew(now.ToUnixTime(), 16);
        //    result |= CalculateSkew(_indexCoden, 0);

        //    return result;
        //}

        /// <summary>
        /// AppId + AppNode + Time + Count + DataNode
        /// 7 + 4 + 32 + 14 + 6
        /// </summary>
        /// <param name="num">分库值</param>
        /// <param name="now">时间</param>
        /// <returns></returns>
        private static long GetSkewResult(short num, DateTime now)
        {
            if (_indexCoden > MAXCOUNT)
                return NextId(num);

            var result = CalculateSkew(_appId, 56);
            result |= CalculateSkew(_appNode, 52);
            result |= CalculateSkew(now.ToUnixTime(), 20);
            result |= CalculateSkew(_indexCoden, 6);
            result |= CalculateSkew(num, 0);

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="num"></param>
        /// <param name="offset"></param>
        /// <returns></returns>
        private static long CalculateSkew(long num, int offset)
        {
            return num << offset;
        }

    }
}
